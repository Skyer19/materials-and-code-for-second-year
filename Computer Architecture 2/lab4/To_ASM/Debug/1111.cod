; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\temp\To_ASM\To_ASM\1111.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_03PMGGPEJJ@?$CFd?6?$AA@			; `string'
PUBLIC	__$ArrayPad$
PUBLIC	_wmain
EXTRN	__imp__getchar:PROC
EXTRN	__imp__printf:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_03PMGGPEJJ@?$CFd?6?$AA@
; File c:\temp\to_asm\to_asm\1111.cpp
CONST	SEGMENT
??_C@_03PMGGPEJJ@?$CFd?6?$AA@ DB '%d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT _wmain
_TEXT	SEGMENT
_z$ = -56						; size = 12
_y$ = -36						; size = 4
_x$ = -24						; size = 4
_address$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_wmain	PROC						; COMDAT

; 4    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 5    : int *address; // Create a pointer that can store an address (location in memory)
; 6    : int x=10; // Create an integer variable called x containing value 10

  00028	c7 45 e8 0a 00
	00 00		 mov	 DWORD PTR _x$[ebp], 10	; 0000000aH

; 7    : int y=0; // y is an int with an initial value 0

  0002f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _y$[ebp], 0

; 8    : int z[3]={5,7,11}; // Create an array of three integers

  00036	c7 45 c8 05 00
	00 00		 mov	 DWORD PTR _z$[ebp], 5
  0003d	c7 45 cc 07 00
	00 00		 mov	 DWORD PTR _z$[ebp+4], 7
  00044	c7 45 d0 0b 00
	00 00		 mov	 DWORD PTR _z$[ebp+8], 11 ; 0000000bH

; 9    : address=&x; // Let address store the value of the address of x in memory

  0004b	8d 45 e8	 lea	 eax, DWORD PTR _x$[ebp]
  0004e	89 45 f4	 mov	 DWORD PTR _address$[ebp], eax

; 10   : y=*address; // y is assigned the value of whatever is pointed to by address

  00051	8b 45 f4	 mov	 eax, DWORD PTR _address$[ebp]
  00054	8b 08		 mov	 ecx, DWORD PTR [eax]
  00056	89 4d dc	 mov	 DWORD PTR _y$[ebp], ecx

; 11   : address =&z[0]; // address is set to the location in memory of the first value

  00059	8d 45 c8	 lea	 eax, DWORD PTR _z$[ebp]
  0005c	89 45 f4	 mov	 DWORD PTR _address$[ebp], eax

; 12   : y+=*(address+2); //y is incremented by the value pointed to at two items above address

  0005f	8b 45 f4	 mov	 eax, DWORD PTR _address$[ebp]
  00062	8b 4d dc	 mov	 ecx, DWORD PTR _y$[ebp]
  00065	03 48 08	 add	 ecx, DWORD PTR [eax+8]
  00068	89 4d dc	 mov	 DWORD PTR _y$[ebp], ecx

; 13   : printf("%d\n",y); // prints y to screen (y=????)

  0006b	8b f4		 mov	 esi, esp
  0006d	8b 45 dc	 mov	 eax, DWORD PTR _y$[ebp]
  00070	50		 push	 eax
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_03PMGGPEJJ@?$CFd?6?$AA@
  00076	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  0007c	83 c4 08	 add	 esp, 8
  0007f	3b f4		 cmp	 esi, esp
  00081	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@wmain:

; 14   : // Wait for enter to be pressed before terminating
; 15   : while(getchar()!=10); // Clear buffer of previous <ret>

  00086	8b f4		 mov	 esi, esp
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getchar
  0008e	3b f4		 cmp	 esi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00098	74 02		 je	 SHORT $LN2@wmain
  0009a	eb ea		 jmp	 SHORT $LN4@wmain
$LN2@wmain:

; 16   : while(getchar()!=10); // Wait for a new <ret>

  0009c	8b f4		 mov	 esi, esp
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getchar
  000a4	3b f4		 cmp	 esi, esp
  000a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ab	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  000ae	74 02		 je	 SHORT $LN1@wmain
  000b0	eb ea		 jmp	 SHORT $LN2@wmain
$LN1@wmain:

; 17   : return 0;

  000b2	33 c0		 xor	 eax, eax

; 18   : }

  000b4	52		 push	 edx
  000b5	8b cd		 mov	 ecx, ebp
  000b7	50		 push	 eax
  000b8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@wmain
  000be	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c3	58		 pop	 eax
  000c4	5a		 pop	 edx
  000c5	5f		 pop	 edi
  000c6	5e		 pop	 esi
  000c7	5b		 pop	 ebx
  000c8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cb	33 cd		 xor	 ecx, ebp
  000cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d2	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000d8	3b ec		 cmp	 ebp, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	8b e5		 mov	 esp, ebp
  000e1	5d		 pop	 ebp
  000e2	c3		 ret	 0
  000e3	90		 npad	 1
$LN10@wmain:
  000e4	02 00 00 00	 DD	 2
  000e8	00 00 00 00	 DD	 $LN9@wmain
$LN9@wmain:
  000ec	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000f0	04 00 00 00	 DD	 4
  000f4	00 00 00 00	 DD	 $LN7@wmain
  000f8	c8 ff ff ff	 DD	 -56			; ffffffc8H
  000fc	0c 00 00 00	 DD	 12			; 0000000cH
  00100	00 00 00 00	 DD	 $LN8@wmain
$LN8@wmain:
  00104	7a		 DB	 122			; 0000007aH
  00105	00		 DB	 0
$LN7@wmain:
  00106	78		 DB	 120			; 00000078H
  00107	00		 DB	 0
_wmain	ENDP
_TEXT	ENDS
END
